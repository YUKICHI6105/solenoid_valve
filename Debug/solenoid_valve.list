
solenoid_valve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002950  08002950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002950  08002950  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002950  08002950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800295c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08002968  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002968  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b70  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001968  00000000  00000000  00027ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00029510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f68  00000000  00000000  0002a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cca  00000000  00000000  000423f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081449  00000000  00000000  0004a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000cb554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002910 	.word	0x08002910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002910 	.word	0x08002910

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe12 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 8000164:	f000 fd0a 	bl	8000b7c <main_cpp>
 8000168:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b090      	sub	sp, #64	; 0x40
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0318 	add.w	r3, r7, #24
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 fbbf 	bl	8002900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000190:	2301      	movs	r3, #1
 8000192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000198:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019a:	2300      	movs	r3, #0
 800019c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fe88 	bl	8001ecc <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c2:	f000 f915 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 f8f5 	bl	80023d0 <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ec:	f000 f900 	bl	80003f0 <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	; 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <MX_CAN_Init+0x64>)
 80001fe:	4a18      	ldr	r2, [pc, #96]	; (8000260 <MX_CAN_Init+0x68>)
 8000200:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN_Init+0x64>)
 8000204:	2202      	movs	r2, #2
 8000206:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <MX_CAN_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_CAN_Init+0x64>)
 8000216:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800021a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN_Init+0x64>)
 800021e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000222:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN_Init+0x64>)
 800022c:	2201      	movs	r2, #1
 800022e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN_Init+0x64>)
 8000238:	2201      	movs	r2, #1
 800023a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN_Init+0x64>)
 800024a:	f000 fe1b 	bl	8000e84 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000254:	f000 f8cc 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40006400 	.word	0x40006400

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f002 fa30 	bl	8002700 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f8a3 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000050 	.word	0x20000050
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b43      	ldr	r3, [pc, #268]	; (80003dc <MX_GPIO_Init+0x124>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a42      	ldr	r2, [pc, #264]	; (80003dc <MX_GPIO_Init+0x124>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b40      	ldr	r3, [pc, #256]	; (80003dc <MX_GPIO_Init+0x124>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <MX_GPIO_Init+0x124>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <MX_GPIO_Init+0x124>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <MX_GPIO_Init+0x124>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b37      	ldr	r3, [pc, #220]	; (80003dc <MX_GPIO_Init+0x124>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <MX_GPIO_Init+0x124>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b34      	ldr	r3, [pc, #208]	; (80003dc <MX_GPIO_Init+0x124>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <MX_GPIO_Init+0x124>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <MX_GPIO_Init+0x124>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <MX_GPIO_Init+0x124>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	482b      	ldr	r0, [pc, #172]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000334:	f001 fd9a 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_YELLOW_Pin|Valve6_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800033e:	4829      	ldr	r0, [pc, #164]	; (80003e4 <MX_GPIO_Init+0x12c>)
 8000340:	f001 fd94 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|Valve0_Pin|Valve1_Pin|Valve2_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f64f 4101 	movw	r1, #64513	; 0xfc01
 800034a:	4827      	ldr	r0, [pc, #156]	; (80003e8 <MX_GPIO_Init+0x130>)
 800034c:	f001 fd8e 	bl	8001e6c <HAL_GPIO_WritePin>
                          |Valve3_Pin|Valve4_Pin|Valve5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_GPIO_Init+0x134>)
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	481e      	ldr	r0, [pc, #120]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000366:	f001 fbfd 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin;
 800036a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	4817      	ldr	r0, [pc, #92]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000384:	f001 fbee 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin Valve6_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|Valve6_Pin;
 8000388:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80003a2:	f001 fbdf 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin Valve0_Pin Valve1_Pin Valve2_Pin
                           Valve3_Pin Valve4_Pin Valve5_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|Valve0_Pin|Valve1_Pin|Valve2_Pin
 80003a6:	f64f 4301 	movw	r3, #64513	; 0xfc01
 80003aa:	613b      	str	r3, [r7, #16]
                          |Valve3_Pin|Valve4_Pin|Valve5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480a      	ldr	r0, [pc, #40]	; (80003e8 <MX_GPIO_Init+0x130>)
 80003c0:	f001 fbd0 	bl	8001b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f001 fb94 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f001 fbad 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40011000 	.word	0x40011000
 80003e4:	40010800 	.word	0x40010800
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	10210000 	.word	0x10210000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <HAL_CAN_MspInit+0xc0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d14b      	bne.n	8000518 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a27      	ldr	r2, [pc, #156]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b25      	ldr	r3, [pc, #148]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <HAL_CAN_MspInit+0xc4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	4818      	ldr	r0, [pc, #96]	; (8000528 <HAL_CAN_MspInit+0xc8>)
 80004c6:	f001 fb4d 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <HAL_CAN_MspInit+0xc8>)
 80004e0:	f001 fb40 	bl	8001b64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_CAN_MspInit+0xcc>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
 80004f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
 80004fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_CAN_MspInit+0xcc>)
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2101      	movs	r1, #1
 800050c:	2014      	movs	r0, #20
 800050e:	f001 faf2 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000512:	2014      	movs	r0, #20
 8000514:	f001 fb0b 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40006400 	.word	0x40006400
 8000524:	40021000 	.word	0x40021000
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <HAL_UART_MspInit+0xa4>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d13d      	bne.n	80005cc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_UART_MspInit+0xa8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4812      	ldr	r0, [pc, #72]	; (80005dc <HAL_UART_MspInit+0xac>)
 8000594:	f001 fae6 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <HAL_UART_MspInit+0xac>)
 80005ac:	f001 fada 	bl	8001b64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0xb0>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_UART_MspInit+0xb0>)
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40013800 	.word	0x40013800
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	40010000 	.word	0x40010000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 fbeb 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800063a:	f000 ff61 	bl	8001500 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028

08000648 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 800064c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000650:	f001 fc24 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <_ZN7CanCtrl4initEv>:
public:
    void init();
	HAL_StatusTypeDef receive(uint32_t& RID,uint8_t data[8]);//受信関数(エラー判定のみ)内容は引数に入れ込む。
};

void CanCtrl::init(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	filter.FilterIdHigh         = 0x100 << 5;               // フィルターIDの上位16ビット
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
	filter.FilterMaskIdHigh     = 0x7f8 << 5;               // フィルターマスクの上位16ビット
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2206      	movs	r2, #6
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
	filter.FilterBank           = 0;                        // フィルターバンクNo
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	220e      	movs	r2, #14
 80006a4:	649a      	str	r2, [r3, #72]	; 0x48
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	645a      	str	r2, [r3, #68]	; 0x44
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3324      	adds	r3, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <_ZN7CanCtrl4initEv+0x5c>)
 80006b4:	f000 fce1 	bl	800107a <HAL_CAN_ConfigFilter>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028

080006c4 <_ZN7CanCtrl7receiveERmPh>:

HAL_StatusTypeDef CanCtrl::receive(uint32_t& RID,uint8_t data[8]){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, data) == HAL_OK){
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f103 0208 	add.w	r2, r3, #8
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2100      	movs	r1, #0
 80006da:	4815      	ldr	r0, [pc, #84]	; (8000730 <_ZN7CanCtrl7receiveERmPh+0x6c>)
 80006dc:	f000 fdda 	bl	8001294 <HAL_CAN_GetRxMessage>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf0c      	ite	eq
 80006e6:	2301      	moveq	r3, #1
 80006e8:	2300      	movne	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <_ZN7CanCtrl7receiveERmPh+0x60>
		RID = rx_header.StdId;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	601a      	str	r2, [r3, #0]
		test = RID;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
		d=data[0];
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB,CAN_LED_Pin,GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <_ZN7CanCtrl7receiveERmPh+0x70>)
 8000710:	f001 fbac 	bl	8001e6c <HAL_GPIO_WritePin>
//		HAL_Delay(80);
		HAL_GPIO_WritePin(GPIOB,CAN_LED_Pin,GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <_ZN7CanCtrl7receiveERmPh+0x70>)
 800071c:	f001 fba6 	bl	8001e6c <HAL_GPIO_WritePin>
		return HAL_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	e000      	b.n	8000726 <_ZN7CanCtrl7receiveERmPh+0x62>
	}
	else{
		return HAL_ERROR;
 8000724:	2301      	movs	r3, #1
	}
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	40010c00 	.word	0x40010c00

08000738 <_ZN8solenoid12value_updateEh>:
	void safty_OK();
	void safty_ERROR();
	void EMS_stop();
};

inline HAL_StatusTypeDef solenoid::value_update(uint8_t Rdata){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	if (valve_Mode == mode::enable){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d12a      	bne.n	80007a2 <_ZN8solenoid12value_updateEh+0x6a>
		if (Rdata == 0x1){
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d113      	bne.n	800077a <_ZN8solenoid12value_updateEh+0x42>
			HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_SET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6898      	ldr	r0, [r3, #8]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	889b      	ldrh	r3, [r3, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f001 fb85 	bl	8001e6c <HAL_GPIO_WritePin>
			if(!(GPIO==GPIOA)){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <_ZN8solenoid12value_updateEh+0x74>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d004      	beq.n	8000776 <_ZN8solenoid12value_updateEh+0x3e>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <_ZN8solenoid12value_updateEh+0x74>)
 8000772:	f001 fb7b 	bl	8001e6c <HAL_GPIO_WritePin>
			}
			return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e014      	b.n	80007a4 <_ZN8solenoid12value_updateEh+0x6c>
		}
		if (Rdata == 0x0){
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10e      	bne.n	800079e <_ZN8solenoid12value_updateEh+0x66>
			HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	f001 fb6e 	bl	8001e6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <_ZN8solenoid12value_updateEh+0x74>)
 8000796:	f001 fb69 	bl	8001e6c <HAL_GPIO_WritePin>
			return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e002      	b.n	80007a4 <_ZN8solenoid12value_updateEh+0x6c>
		}
		else{
			return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e000      	b.n	80007a4 <_ZN8solenoid12value_updateEh+0x6c>
		}
	}
	else{
		return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
	}
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010800 	.word	0x40010800

080007b0 <_ZN8solenoid8safty_OKEv>:

inline void solenoid::safty_OK(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if(valve_Mode == mode::disable){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d107      	bne.n	80007d0 <_ZN8solenoid8safty_OKEv+0x20>
//		if(GPIO->ODR & msk){
		HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	889b      	ldrh	r3, [r3, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f001 fb4e 	bl	8001e6c <HAL_GPIO_WritePin>
//		}
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN8solenoid11safty_ERROREv>:

inline void solenoid::safty_ERROR(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
//	    if(!(GPIO->ODR & msk)){}
//		else{
		    HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6898      	ldr	r0, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fb3e 	bl	8001e6c <HAL_GPIO_WritePin>
//		}
		if(valve_Mode == mode::disable){}
		else{
//		    valve_Mode = disable;
		}
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZN8solenoid8EMS_stopEv>:

inline void solenoid::EMS_stop(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6898      	ldr	r0, [r3, #8]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	889b      	ldrh	r3, [r3, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	f001 fb2e 	bl	8001e6c <HAL_GPIO_WritePin>
	if(valve_Mode == mode::enable){
//	   valve_Mode = disable;
	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN9SolenCtrl4initEv>:
	HAL_StatusTypeDef EMS_down();
	void check_Safty_OK();
	void check_Safty_ERROR();
};

inline void SolenCtrl::init(){
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0;i<0x7;i++){
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b06      	cmp	r3, #6
 8000828:	d80f      	bhi.n	800084a <_ZN9SolenCtrl4initEv+0x32>
		Valve[i].BID = (0x101+i);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f203 1101 	addw	r1, r3, #257	; 0x101
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4403      	add	r3, r0
 800083e:	3304      	adds	r3, #4
 8000840:	6019      	str	r1, [r3, #0]
	for (uint32_t i=0;i<0x7;i++){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e7ec      	b.n	8000824 <_ZN9SolenCtrl4initEv+0xc>
	}
	Valve[0].Valve_Pin = Valve0_Pin;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000850:	811a      	strh	r2, [r3, #8]
	Valve[1].Valve_Pin = Valve1_Pin;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000858:	839a      	strh	r2, [r3, #28]
	Valve[2].Valve_Pin = Valve2_Pin;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000860:	861a      	strh	r2, [r3, #48]	; 0x30
	Valve[3].Valve_Pin = Valve3_Pin;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Valve[4].Valve_Pin = Valve4_Pin;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	Valve[5].Valve_Pin = Valve5_Pin;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	Valve[6].Valve_Pin = Valve6_Pin;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	Valve[6].GPIO = Valve6_GPIO_Port;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <_ZN9SolenCtrl4initEv+0xc0>)
 800088e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Valve[0].msk=GPIO_ODR_ODR10;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
	Valve[1].msk=GPIO_ODR_ODR11;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
	Valve[2].msk=GPIO_ODR_ODR12;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
	Valve[3].msk=GPIO_ODR_ODR13;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b0:	64da      	str	r2, [r3, #76]	; 0x4c
	Valve[4].msk=GPIO_ODR_ODR14;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b8:	661a      	str	r2, [r3, #96]	; 0x60
	Valve[5].msk=GPIO_ODR_ODR15;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c0:	675a      	str	r2, [r3, #116]	; 0x74
	Valve[6].msk=GPIO_ODR_ODR8;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40010800 	.word	0x40010800

080008dc <_ZN9SolenCtrl6updateEmPh>:

inline HAL_StatusTypeDef SolenCtrl::update(uint32_t RID,uint8_t rxData[8]){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	uint8_t data = rxData[0];
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<7;i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	dc26      	bgt.n	8000946 <_ZN9SolenCtrl6updateEmPh+0x6a>
		if(RID == Valve[i].BID){
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	3304      	adds	r3, #4
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d116      	bne.n	800093e <_ZN9SolenCtrl6updateEmPh+0x62>
			if(Valve[i].value_update(data)==HAL_OK){
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	3304      	adds	r3, #4
 8000920:	7cfa      	ldrb	r2, [r7, #19]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff07 	bl	8000738 <_ZN8solenoid12value_updateEh>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <_ZN9SolenCtrl6updateEmPh+0x62>
				return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e004      	b.n	8000948 <_ZN9SolenCtrl6updateEmPh+0x6c>
	for(int i=0;i<7;i++){
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e7d5      	b.n	80008f2 <_ZN9SolenCtrl6updateEmPh+0x16>
			}
		}
	}
	return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_ZN9SolenCtrl9getPreEMSEv>:

inline mode SolenCtrl::getPreEMS(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	return pre_EMS;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_ZN9SolenCtrl11set_pre_EMSE4mode>:

inline HAL_StatusTypeDef SolenCtrl::set_pre_EMS(mode ems){
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	pre_EMS = ems;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <_ZN9SolenCtrl8EMS_downEv>:

inline HAL_StatusTypeDef SolenCtrl::EMS_down(){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<7;i++){
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b06      	cmp	r3, #6
 8000994:	dc0e      	bgt.n	80009b4 <_ZN9SolenCtrl8EMS_downEv+0x30>
		Valve[i].EMS_stop();
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	3304      	adds	r3, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff26 	bl	80007f8 <_ZN8solenoid8EMS_stopEv>
	for(int i=0;i<7;i++){
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e7ed      	b.n	8000990 <_ZN9SolenCtrl8EMS_downEv+0xc>
	}
	pre_EMS = mode::disable;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2101      	movs	r1, #1
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <_ZN9SolenCtrl8EMS_downEv+0x54>)
 80009c0:	f001 fa54 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <_ZN9SolenCtrl8EMS_downEv+0x58>)
 80009ca:	f001 fa4f 	bl	8001e6c <HAL_GPIO_WritePin>
	return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40010c00 	.word	0x40010c00
 80009dc:	40010800 	.word	0x40010800

080009e0 <_ZN9SolenCtrl14check_Safty_OKEv>:

inline void SolenCtrl::check_Safty_OK(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	for (int i=0;i<7;i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	dc0e      	bgt.n	8000a10 <_ZN9SolenCtrl14check_Safty_OKEv+0x30>
		Valve[i].safty_OK();
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	3304      	adds	r3, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fed4 	bl	80007b0 <_ZN8solenoid8safty_OKEv>
	for (int i=0;i<7;i++){
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e7ed      	b.n	80009ec <_ZN9SolenCtrl14check_Safty_OKEv+0xc>
	}
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <_ZN9SolenCtrl14check_Safty_OKEv+0x44>)
 8000a16:	f001 fa29 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40010c00 	.word	0x40010c00

08000a28 <_ZN9SolenCtrl17check_Safty_ERROREv>:

inline void SolenCtrl::check_Safty_ERROR(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	for (int i=0;i<7;i++){
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	dc0e      	bgt.n	8000a58 <_ZN9SolenCtrl17check_Safty_ERROREv+0x30>
		Valve[i].safty_ERROR();
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	3304      	adds	r3, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fec4 	bl	80007d8 <_ZN8solenoid11safty_ERROREv>
	for (int i=0;i<7;i++){
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e7ed      	b.n	8000a34 <_ZN9SolenCtrl17check_Safty_ERROREv+0xc>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_ZN8solenoidC1Ev>:
struct solenoid{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_ZN8solenoidC1Ev+0x20>)
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <_ZN9SolenCtrlC1Ev>:
class SolenCtrl{
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2406      	movs	r4, #6
 8000a98:	461d      	mov	r5, r3
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	db05      	blt.n	8000aaa <_ZN9SolenCtrlC1Ev+0x26>
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	f7ff ffde 	bl	8000a60 <_ZN8solenoidC1Ev>
 8000aa4:	3514      	adds	r5, #20
 8000aa6:	3c01      	subs	r4, #1
 8000aa8:	e7f7      	b.n	8000a9a <_ZN9SolenCtrlC1Ev+0x16>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}

08000ab4 <HAL_CAN_RxFifo0MsgPendingCallback>:
CanCtrl Can;
SolenCtrl Solen;

extern"C"{
	extern UART_HandleTypeDef huart2;
	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
		uint32_t RID = 0x110;
 8000abc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ac0:	617b      	str	r3, [r7, #20]
		uint8_t RData[8];
		if (Can.receive(RID,RData) == HAL_OK)return;
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4815      	ldr	r0, [pc, #84]	; (8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000ace:	f7ff fdf9 	bl	80006c4 <_ZN7CanCtrl7receiveERmPh>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d119      	bne.n	8000b16 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		if(Solen.getPreEMS()== mode::enable)return;
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ae4:	f7ff ff34 	bl	8000950 <_ZN9SolenCtrl9getPreEMSEv>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d110      	bne.n	8000b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
		if (Solen.update(RID,RData) == HAL_OK)return;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000b02:	f7ff feeb 	bl	80008dc <_ZN9SolenCtrl6updateEmPh>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	e002      	b.n	8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
		if (Can.receive(RID,RData) == HAL_OK)return;
 8000b16:	bf00      	nop
 8000b18:	e000      	b.n	8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
		if(Solen.getPreEMS()== mode::enable)return;
 8000b1a:	bf00      	nop
	}
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000094 	.word	0x20000094
 8000b28:	200000e0 	.word	0x200000e0

08000b2c <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin==EMS_Pin)return;
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3c:	d016      	beq.n	8000b6c <HAL_GPIO_EXTI_Callback+0x40>
		if(Solen.EMS_down()==HAL_OK){
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b40:	f7ff ff20 	bl	8000984 <_ZN9SolenCtrl8EMS_downEv>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b5a:	f001 f987 	bl	8001e6c <HAL_GPIO_WritePin>
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_EXTI_Callback+0x42>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);;
 8000b60:	2200      	movs	r2, #0
 8000b62:	2101      	movs	r1, #1
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b66:	f001 f981 	bl	8001e6c <HAL_GPIO_WritePin>
 8000b6a:	e000      	b.n	8000b6e <HAL_GPIO_EXTI_Callback+0x42>
		if(GPIO_Pin==EMS_Pin)return;
 8000b6c:	bf00      	nop
		}
	}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <main_cpp>:
}

void main_cpp(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	Can.init();
 8000b82:	4854      	ldr	r0, [pc, #336]	; (8000cd4 <main_cpp+0x158>)
 8000b84:	f7ff fd6e 	bl	8000664 <_ZN7CanCtrl4initEv>
	Solen.init();
 8000b88:	4853      	ldr	r0, [pc, #332]	; (8000cd8 <main_cpp+0x15c>)
 8000b8a:	f7ff fe45 	bl	8000818 <_ZN9SolenCtrl4initEv>
	Solen.EMS_down();
 8000b8e:	4852      	ldr	r0, [pc, #328]	; (8000cd8 <main_cpp+0x15c>)
 8000b90:	f7ff fef8 	bl	8000984 <_ZN9SolenCtrl8EMS_downEv>
	for(uint8_t i=0;i<3;i++){
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d82a      	bhi.n	8000bf4 <main_cpp+0x78>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	484e      	ldr	r0, [pc, #312]	; (8000cdc <main_cpp+0x160>)
 8000ba4:	f001 f962 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	484c      	ldr	r0, [pc, #304]	; (8000ce0 <main_cpp+0x164>)
 8000bae:	f001 f95d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bb2:	2064      	movs	r0, #100	; 0x64
 8000bb4:	f000 f942 	bl	8000e3c <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4847      	ldr	r0, [pc, #284]	; (8000cdc <main_cpp+0x160>)
 8000bbe:	f001 f955 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	4846      	ldr	r0, [pc, #280]	; (8000ce0 <main_cpp+0x164>)
 8000bc8:	f001 f950 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f000 f935 	bl	8000e3c <HAL_Delay>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4842      	ldr	r0, [pc, #264]	; (8000ce0 <main_cpp+0x164>)
 8000bd8:	f001 f948 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <main_cpp+0x164>)
 8000be2:	f001 f943 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f000 f928 	bl	8000e3c <HAL_Delay>
	for(uint8_t i=0;i<3;i++){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e7d1      	b.n	8000b98 <main_cpp+0x1c>
	}
	HAL_CAN_Start(&hcan);
 8000bf4:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <main_cpp+0x168>)
 8000bf6:	f000 fb09 	bl	800120c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4839      	ldr	r0, [pc, #228]	; (8000ce4 <main_cpp+0x168>)
 8000bfe:	f000 fc5a 	bl	80014b6 <HAL_CAN_ActivateNotification>

	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	4836      	ldr	r0, [pc, #216]	; (8000ce0 <main_cpp+0x164>)
 8000c08:	f001 f930 	bl	8001e6c <HAL_GPIO_WritePin>
//	unsigned char usart_data = 0;
//	uint16_t i = 0b1;
	while(true){//safty_roop
//		HAL_UART_Receive(&huart2, usart_data, i, 100);//(レジスタモジュール,データ,文字数,タイムアウト(つまりその時間経過したらエラー終了))
    	if(Solen.getPreEMS() == mode::enable){
 8000c0c:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <main_cpp+0x15c>)
 8000c0e:	f7ff fe9f 	bl	8000950 <_ZN9SolenCtrl9getPreEMSEv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d011      	beq.n	8000c46 <main_cpp+0xca>
    		if((GPIOC->IDR & GPIO_IDR_IDR13)){//modeの状態違反の確認
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <main_cpp+0x16c>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <main_cpp+0xc4>
    			Solen.check_Safty_OK();
 8000c38:	4827      	ldr	r0, [pc, #156]	; (8000cd8 <main_cpp+0x15c>)
 8000c3a:	f7ff fed1 	bl	80009e0 <_ZN9SolenCtrl14check_Safty_OKEv>
 8000c3e:	e002      	b.n	8000c46 <main_cpp+0xca>
    		}
    		else{//予備の緊急停止
    			Solen.EMS_down();//コールバックだけだと一定の確率でバグる。意味不明。<-割り込み使用時に注意点があるらしい。
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <main_cpp+0x15c>)
 8000c42:	f7ff fe9f 	bl	8000984 <_ZN9SolenCtrl8EMS_downEv>
    		}

    	}
    	if(Solen.getPreEMS() == mode::disable){
 8000c46:	4824      	ldr	r0, [pc, #144]	; (8000cd8 <main_cpp+0x15c>)
 8000c48:	f7ff fe82 	bl	8000950 <_ZN9SolenCtrl9getPreEMSEv>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf0c      	ite	eq
 8000c52:	2301      	moveq	r3, #1
 8000c54:	2300      	movne	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01f      	beq.n	8000c9c <main_cpp+0x120>
    		if((GPIOC->IDR & GPIO_IDR_IDR13)){//EMS解除時
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <main_cpp+0x16c>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00c      	beq.n	8000c8c <main_cpp+0x110>
    			Solen.check_Safty_ERROR();
 8000c72:	4819      	ldr	r0, [pc, #100]	; (8000cd8 <main_cpp+0x15c>)
 8000c74:	f7ff fed8 	bl	8000a28 <_ZN9SolenCtrl17check_Safty_ERROREv>
    			Solen.set_pre_EMS(mode::enable);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <main_cpp+0x15c>)
 8000c7c:	f7ff fe73 	bl	8000966 <_ZN9SolenCtrl11set_pre_EMSE4mode>
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <main_cpp+0x160>)
 8000c86:	f001 f8f1 	bl	8001e6c <HAL_GPIO_WritePin>
 8000c8a:	e007      	b.n	8000c9c <main_cpp+0x120>
    		}
    		else{//EMS継続
    			Solen.check_Safty_ERROR();
 8000c8c:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <main_cpp+0x15c>)
 8000c8e:	f7ff fecb 	bl	8000a28 <_ZN9SolenCtrl17check_Safty_ERROREv>
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <main_cpp+0x160>)
 8000c98:	f001 f8e8 	bl	8001e6c <HAL_GPIO_WritePin>
    		}
    	}
    	uint16_t tick = HAL_GetTick()%2000;
 8000c9c:	f000 f8c4 	bl	8000e28 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <main_cpp+0x170>)
 8000ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca8:	09db      	lsrs	r3, r3, #7
 8000caa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000cae:	fb01 f303 	mul.w	r3, r1, r3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	80bb      	strh	r3, [r7, #4]
    	if(tick < 100) HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	2b63      	cmp	r3, #99	; 0x63
 8000cba:	d805      	bhi.n	8000cc8 <main_cpp+0x14c>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <main_cpp+0x164>)
 8000cc2:	f001 f8d3 	bl	8001e6c <HAL_GPIO_WritePin>
 8000cc6:	e7a1      	b.n	8000c0c <main_cpp+0x90>
    	else HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <main_cpp+0x164>)
 8000cce:	f001 f8cd 	bl	8001e6c <HAL_GPIO_WritePin>
    }
 8000cd2:	e79b      	b.n	8000c0c <main_cpp+0x90>
 8000cd4:	20000094 	.word	0x20000094
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	10624dd3 	.word	0x10624dd3

08000cf0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d107      	bne.n	8000d10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d102      	bne.n	8000d10 <_Z41__static_initialization_and_destruction_0ii+0x20>
SolenCtrl Solen;
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000d0c:	f7ff feba 	bl	8000a84 <_ZN9SolenCtrlC1Ev>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000e0 	.word	0x200000e0

08000d1c <_GLOBAL__sub_I__ZN7CanCtrl4initEv>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ffe3 	bl	8000cf0 <_Z41__static_initialization_and_destruction_0ii>
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d52:	f7ff fc81 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f001 fdaf 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff f9f7 	bl	800014c <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d68:	0800295c 	.word	0x0800295c
  ldr r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d70:	20000174 	.word	0x20000174

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fea9 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fb32 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fec1 	bl	8001b4a <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fe89 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000170 	.word	0x20000170

08000e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000170 	.word	0x20000170

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0ed      	b.n	8001072 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fadc 	bl	8000460 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff ffb6 	bl	8000e28 <HAL_GetTick>
 8000ebc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ebe:	e012      	b.n	8000ee6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec0:	f7ff ffb2 	bl	8000e28 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	d90b      	bls.n	8000ee6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2205      	movs	r2, #5
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0c5      	b.n	8001072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0e5      	beq.n	8000ec0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0202 	bic.w	r2, r2, #2
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f04:	f7ff ff90 	bl	8000e28 <HAL_GetTick>
 8000f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f0a:	e012      	b.n	8000f32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f0c:	f7ff ff8c 	bl	8000e28 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b0a      	cmp	r3, #10
 8000f18:	d90b      	bls.n	8000f32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e09f      	b.n	8001072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e5      	bne.n	8000f0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7e1b      	ldrb	r3, [r3, #24]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7e5b      	ldrb	r3, [r3, #25]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7e9b      	ldrb	r3, [r3, #26]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0220 	bic.w	r2, r2, #32
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7edb      	ldrb	r3, [r3, #27]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0210 	bic.w	r2, r2, #16
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0210 	orr.w	r2, r2, #16
 8000fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7f1b      	ldrb	r3, [r3, #28]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0208 	orr.w	r2, r2, #8
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0208 	bic.w	r2, r2, #8
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7f5b      	ldrb	r3, [r3, #29]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0204 	orr.w	r2, r2, #4
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e007      	b.n	800103c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0204 	bic.w	r2, r2, #4
 800103a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	ea42 0103 	orr.w	r1, r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d003      	beq.n	80010a0 <HAL_CAN_ConfigFilter+0x26>
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	2b02      	cmp	r3, #2
 800109c:	f040 80aa 	bne.w	80011f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	2201      	movs	r2, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d123      	bne.n	8001122 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3248      	adds	r2, #72	; 0x48
 8001102:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	3348      	adds	r3, #72	; 0x48
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d122      	bne.n	8001170 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800114a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3248      	adds	r2, #72	; 0x48
 8001150:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001164:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001166:	6979      	ldr	r1, [r7, #20]
 8001168:	3348      	adds	r3, #72	; 0x48
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d109      	bne.n	800118c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800118a:	e007      	b.n	800119c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d109      	bne.n	80011b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011b6:	e007      	b.n	80011c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d107      	bne.n	80011e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	431a      	orrs	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e6:	f023 0201 	bic.w	r2, r3, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e006      	b.n	8001202 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
  }
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d12e      	bne.n	800127e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001238:	f7ff fdf6 	bl	8000e28 <HAL_GetTick>
 800123c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800123e:	e012      	b.n	8001266 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001240:	f7ff fdf2 	bl	8000e28 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d90b      	bls.n	8001266 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2205      	movs	r2, #5
 800125e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e012      	b.n	800128c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e5      	bne.n	8001240 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e006      	b.n	800128c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
  }
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d003      	beq.n	80012b8 <HAL_CAN_GetRxMessage+0x24>
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f040 80f3 	bne.w	800149e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10e      	bne.n	80012dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d116      	bne.n	80012fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0e7      	b.n	80014ac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0d8      	b.n	80014ac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	331b      	adds	r3, #27
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0204 	and.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10c      	bne.n	8001332 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e00b      	b.n	800134a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	331b      	adds	r3, #27
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	331b      	adds	r3, #27
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0202 	and.w	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	331b      	adds	r3, #27
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	3304      	adds	r3, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 020f 	and.w	r2, r3, #15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	331b      	adds	r3, #27
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	331b      	adds	r3, #27
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	3304      	adds	r3, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0a1a      	lsrs	r2, r3, #8
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1a      	lsrs	r2, r3, #16
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3302      	adds	r3, #2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0e1a      	lsrs	r2, r3, #24
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3303      	adds	r3, #3
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3304      	adds	r3, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0a1a      	lsrs	r2, r3, #8
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3305      	adds	r3, #5
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0c1a      	lsrs	r2, r3, #16
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3306      	adds	r3, #6
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e1a      	lsrs	r2, r3, #24
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3307      	adds	r3, #7
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d108      	bne.n	800148a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	e007      	b.n	800149a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e006      	b.n	80014ac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
  }
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d002      	beq.n	80014d4 <HAL_CAN_ActivateNotification+0x1e>
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d109      	bne.n	80014e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e006      	b.n	80014f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d07c      	beq.n	8001640 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f983 	bl	800186e <HAL_CAN_TxMailbox0CompleteCallback>
 8001568:	e016      	b.n	8001598 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
 800157c:	e00c      	b.n	8001598 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
 8001590:	e002      	b.n	8001598 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f986 	bl	80018a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d024      	beq.n	80015ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f962 	bl	8001880 <HAL_CAN_TxMailbox1CompleteCallback>
 80015bc:	e016      	b.n	80015ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
 80015d0:	e00c      	b.n	80015ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	e002      	b.n	80015ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f965 	bl	80018b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f941 	bl	8001892 <HAL_CAN_TxMailbox2CompleteCallback>
 8001610:	e016      	b.n	8001640 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
 8001624:	e00c      	b.n	8001640 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	e002      	b.n	8001640 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f944 	bl	80018c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2210      	movs	r2, #16
 8001662:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2208      	movs	r2, #8
 800167e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f92a 	bl	80018da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fa08 	bl	8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2210      	movs	r2, #16
 80016c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2208      	movs	r2, #8
 80016e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f90a 	bl	80018fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8f2 	bl	80018ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2210      	movs	r2, #16
 8001722:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f8f3 	bl	8001910 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2208      	movs	r2, #8
 8001744:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8eb 	bl	8001922 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d07b      	beq.n	800184e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d072      	beq.n	8001846 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d043      	beq.n	8001846 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d03e      	beq.n	8001846 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ce:	2b60      	cmp	r3, #96	; 0x60
 80017d0:	d02b      	beq.n	800182a <HAL_CAN_IRQHandler+0x32a>
 80017d2:	2b60      	cmp	r3, #96	; 0x60
 80017d4:	d82e      	bhi.n	8001834 <HAL_CAN_IRQHandler+0x334>
 80017d6:	2b50      	cmp	r3, #80	; 0x50
 80017d8:	d022      	beq.n	8001820 <HAL_CAN_IRQHandler+0x320>
 80017da:	2b50      	cmp	r3, #80	; 0x50
 80017dc:	d82a      	bhi.n	8001834 <HAL_CAN_IRQHandler+0x334>
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d019      	beq.n	8001816 <HAL_CAN_IRQHandler+0x316>
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d826      	bhi.n	8001834 <HAL_CAN_IRQHandler+0x334>
 80017e6:	2b30      	cmp	r3, #48	; 0x30
 80017e8:	d010      	beq.n	800180c <HAL_CAN_IRQHandler+0x30c>
 80017ea:	2b30      	cmp	r3, #48	; 0x30
 80017ec:	d822      	bhi.n	8001834 <HAL_CAN_IRQHandler+0x334>
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d002      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x2f8>
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d005      	beq.n	8001802 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017f6:	e01d      	b.n	8001834 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001800:	e019      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800180a:	e014      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001814:	e00f      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181e:	e00a      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001828:	e005      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001832:	e000      	b.n	8001836 <HAL_CAN_IRQHandler+0x336>
            break;
 8001834:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001844:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2204      	movs	r2, #4
 800184c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f867 	bl	8001934 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
	...

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b08b      	sub	sp, #44	; 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e169      	b.n	8001e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8158 	bne.w	8001e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a9a      	ldr	r2, [pc, #616]	; (8001e04 <HAL_GPIO_Init+0x2a0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d05e      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_GPIO_Init+0x2a0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d875      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001ba6:	4a98      	ldr	r2, [pc, #608]	; (8001e08 <HAL_GPIO_Init+0x2a4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d058      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bac:	4a96      	ldr	r2, [pc, #600]	; (8001e08 <HAL_GPIO_Init+0x2a4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d86f      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bb2:	4a96      	ldr	r2, [pc, #600]	; (8001e0c <HAL_GPIO_Init+0x2a8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d052      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bb8:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_GPIO_Init+0x2a8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d869      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bbe:	4a94      	ldr	r2, [pc, #592]	; (8001e10 <HAL_GPIO_Init+0x2ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d04c      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bc4:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_GPIO_Init+0x2ac>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d863      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bca:	4a92      	ldr	r2, [pc, #584]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d046      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a90      	ldr	r2, [pc, #576]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d85d      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d82a      	bhi.n	8001c30 <HAL_GPIO_Init+0xcc>
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d859      	bhi.n	8001c92 <HAL_GPIO_Init+0x12e>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <HAL_GPIO_Init+0x80>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c5f 	.word	0x08001c5f
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001c4b 	.word	0x08001c4b
 8001bf0:	08001c8d 	.word	0x08001c8d
 8001bf4:	08001c93 	.word	0x08001c93
 8001bf8:	08001c93 	.word	0x08001c93
 8001bfc:	08001c93 	.word	0x08001c93
 8001c00:	08001c93 	.word	0x08001c93
 8001c04:	08001c93 	.word	0x08001c93
 8001c08:	08001c93 	.word	0x08001c93
 8001c0c:	08001c93 	.word	0x08001c93
 8001c10:	08001c93 	.word	0x08001c93
 8001c14:	08001c93 	.word	0x08001c93
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001c93 	.word	0x08001c93
 8001c20:	08001c93 	.word	0x08001c93
 8001c24:	08001c93 	.word	0x08001c93
 8001c28:	08001c41 	.word	0x08001c41
 8001c2c:	08001c55 	.word	0x08001c55
 8001c30:	4a79      	ldr	r2, [pc, #484]	; (8001e18 <HAL_GPIO_Init+0x2b4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c36:	e02c      	b.n	8001c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e029      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	3304      	adds	r3, #4
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e024      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e01f      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e01a      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c66:	2304      	movs	r3, #4
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e013      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c74:	2308      	movs	r3, #8
 8001c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	611a      	str	r2, [r3, #16]
          break;
 8001c7e:	e009      	b.n	8001c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	615a      	str	r2, [r3, #20]
          break;
 8001c8a:	e003      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x130>
          break;
 8001c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d801      	bhi.n	8001c9e <HAL_GPIO_Init+0x13a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_Init+0x13e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d802      	bhi.n	8001cb0 <HAL_GPIO_Init+0x14c>
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x152>
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3b08      	subs	r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	6a39      	ldr	r1, [r7, #32]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80b1 	beq.w	8001e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_GPIO_Init+0x2b8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cfc:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <HAL_GPIO_Init+0x2bc>)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_GPIO_Init+0x2c0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_GPIO_Init+0x1ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <HAL_GPIO_Init+0x2c4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_GPIO_Init+0x1e8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x1e4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_GPIO_Init+0x2cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_GPIO_Init+0x1e0>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1ee>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d62:	492f      	ldr	r1, [pc, #188]	; (8001e20 <HAL_GPIO_Init+0x2bc>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	492c      	ldr	r1, [pc, #176]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4928      	ldr	r1, [pc, #160]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4922      	ldr	r1, [pc, #136]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	491e      	ldr	r1, [pc, #120]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4918      	ldr	r1, [pc, #96]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4914      	ldr	r1, [pc, #80]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d021      	beq.n	8001e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e021      	b.n	8001e46 <HAL_GPIO_Init+0x2e2>
 8001e02:	bf00      	nop
 8001e04:	10320000 	.word	0x10320000
 8001e08:	10310000 	.word	0x10310000
 8001e0c:	10220000 	.word	0x10220000
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10120000 	.word	0x10120000
 8001e18:	10110000 	.word	0x10110000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40011400 	.word	0x40011400
 8001e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_GPIO_Init+0x304>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4909      	ldr	r1, [pc, #36]	; (8001e68 <HAL_GPIO_Init+0x304>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f ae8e 	bne.w	8001b78 <HAL_GPIO_Init+0x14>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	372c      	adds	r7, #44	; 0x2c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fe36 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e272      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8087 	beq.w	8001ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eec:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d00c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef8:	4b8f      	ldr	r3, [pc, #572]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d112      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5e>
 8001f04:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4b89      	ldr	r3, [pc, #548]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d06c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d168      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e24c      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x76>
 8001f34:	4b80      	ldr	r3, [pc, #512]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a7f      	ldr	r2, [pc, #508]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e02e      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x98>
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7a      	ldr	r2, [pc, #488]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a77      	ldr	r2, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xbc>
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a71      	ldr	r2, [pc, #452]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a67      	ldr	r2, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ff3e 	bl	8000e28 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe ff3a 	bl	8000e28 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e200      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe4>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff2a 	bl	8000e28 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe ff26 	bl	8000e28 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1ec      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x10c>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d063      	beq.n	80020ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d11c      	bne.n	8002058 <HAL_RCC_OscConfig+0x18c>
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x176>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e1c0      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4939      	ldr	r1, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	e03a      	b.n	80020ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_RCC_OscConfig+0x270>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fedf 	bl	8000e28 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7fe fedb 	bl	8000e28 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1a1      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4927      	ldr	r1, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_RCC_OscConfig+0x270>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe febe 	bl	8000e28 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe feba 	bl	8000e28 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e180      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03a      	beq.n	8002150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fe9e 	bl	8000e28 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe fe9a 	bl	8000e28 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e160      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f000 fad8 	bl	80026c4 <RCC_Delay>
 8002114:	e01c      	b.n	8002150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fe84 	bl	8000e28 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002122:	e00f      	b.n	8002144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7fe fe80 	bl	8000e28 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d908      	bls.n	8002144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e146      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	42420000 	.word	0x42420000
 8002140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e9      	bne.n	8002124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a6 	beq.w	80022aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fe41 	bl	8000e28 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe fe3d 	bl	8000e28 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	; 0x64
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e103      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b75      	ldr	r3, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x312>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a6e      	ldr	r2, [pc, #440]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e02d      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x334>
 80021e6:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a69      	ldr	r2, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a66      	ldr	r2, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	e01c      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x356>
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a60      	ldr	r2, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a5d      	ldr	r2, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a5a      	ldr	r2, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	4b58      	ldr	r3, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d015      	beq.n	800226e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7fe fdf1 	bl	8000e28 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fded 	bl	8000e28 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0b1      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ee      	beq.n	800224a <HAL_RCC_OscConfig+0x37e>
 800226c:	e014      	b.n	8002298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fddb 	bl	8000e28 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fdd7 	bl	8000e28 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e09b      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ee      	bne.n	8002276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8087 	beq.w	80023c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d061      	beq.n	8002384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d146      	bne.n	8002356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fdab 	bl	8000e28 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fda7 	bl	8000e28 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e06d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4921      	ldr	r1, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a19      	ldr	r1, [r3, #32]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	430b      	orrs	r3, r1
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fd7b 	bl	8000e28 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fd77 	bl	8000e28 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e03d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x46a>
 8002354:	e035      	b.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fd64 	bl	8000e28 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fd60 	bl	8000e28 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e026      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x498>
 8002382:	e01e      	b.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e019      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x500>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800244e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fcb2 	bl	8000e28 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fcae 	bl	8000e28 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fc10 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	08002938 	.word	0x08002938
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b490      	push	{r4, r7}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_GetSysClockFreq+0xac>)
 80025ac:	1d3c      	adds	r4, r7, #4
 80025ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025b4:	f240 2301 	movw	r3, #513	; 0x201
 80025b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x46>
 80025e2:	e02b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025e6:	623b      	str	r3, [r7, #32]
      break;
 80025e8:	e02b      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3328      	adds	r3, #40	; 0x28
 80025f4:	443b      	add	r3, r7
 80025f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d012      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0c5b      	lsrs	r3, r3, #17
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	3328      	adds	r3, #40	; 0x28
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002618:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e004      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	623b      	str	r3, [r7, #32]
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800263e:	623b      	str	r3, [r7, #32]
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6a3b      	ldr	r3, [r7, #32]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3728      	adds	r7, #40	; 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	08002928 	.word	0x08002928
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_RCC_GetHCLKFreq+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08002948 	.word	0x08002948

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffde 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0adb      	lsrs	r3, r3, #11
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08002948 	.word	0x08002948

080026c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <RCC_Delay+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <RCC_Delay+0x38>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e0:	bf00      	nop
  }
  while (Delay --);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <RCC_Delay+0x1c>
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e03f      	b.n	8002792 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd ff02 	bl	8000530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f829 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027d6:	f023 030c 	bic.w	r3, r3, #12
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <UART_SetConfig+0x114>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002804:	f7ff ff4a 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	e002      	b.n	8002812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800280c:	f7ff ff32 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	0119      	lsls	r1, r3, #4
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002868:	4419      	add	r1, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009a      	lsls	r2, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <UART_SetConfig+0x118>)
 8002882:	fba3 0302 	umull	r0, r3, r3, r2
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2064      	movs	r0, #100	; 0x64
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3332      	adds	r3, #50	; 0x32
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <UART_SetConfig+0x118>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	440a      	add	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40013800 	.word	0x40013800
 80028b4:	51eb851f 	.word	0x51eb851f

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	2600      	movs	r6, #0
 80028bc:	4d0c      	ldr	r5, [pc, #48]	; (80028f0 <__libc_init_array+0x38>)
 80028be:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <__libc_init_array+0x3c>)
 80028c0:	1b64      	subs	r4, r4, r5
 80028c2:	10a4      	asrs	r4, r4, #2
 80028c4:	42a6      	cmp	r6, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	f000 f822 	bl	8002910 <_init>
 80028cc:	2600      	movs	r6, #0
 80028ce:	4d0a      	ldr	r5, [pc, #40]	; (80028f8 <__libc_init_array+0x40>)
 80028d0:	4c0a      	ldr	r4, [pc, #40]	; (80028fc <__libc_init_array+0x44>)
 80028d2:	1b64      	subs	r4, r4, r5
 80028d4:	10a4      	asrs	r4, r4, #2
 80028d6:	42a6      	cmp	r6, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e0:	4798      	blx	r3
 80028e2:	3601      	adds	r6, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ea:	4798      	blx	r3
 80028ec:	3601      	adds	r6, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08002950 	.word	0x08002950
 80028f4:	08002950 	.word	0x08002950
 80028f8:	08002950 	.word	0x08002950
 80028fc:	08002958 	.word	0x08002958

08002900 <memset>:
 8002900:	4603      	mov	r3, r0
 8002902:	4402      	add	r2, r0
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <memset+0xa>
 8002908:	4770      	bx	lr
 800290a:	f803 1b01 	strb.w	r1, [r3], #1
 800290e:	e7f9      	b.n	8002904 <memset+0x4>

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
