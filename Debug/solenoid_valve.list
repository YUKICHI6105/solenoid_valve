
solenoid_valve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ec  080024ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024ec  080024ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024ec  080024ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08002504  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002504  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b24  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001966  00000000  00000000  00027b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  000294c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f68  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ca8  00000000  00000000  000423b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081468  00000000  00000000  0004a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb4c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe8  00000000  00000000  000cb510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024ac 	.word	0x080024ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024ac 	.word	0x080024ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fce8 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 8000164:	f000 fbfa 	bl	800095c <main_cpp>
 8000168:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b090      	sub	sp, #64	; 0x40
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0318 	add.w	r3, r7, #24
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 f98d 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000190:	2301      	movs	r3, #1
 8000192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000198:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019a:	2300      	movs	r3, #0
 800019c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fc56 	bl	8001a68 <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c2:	f000 f915 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fec3 	bl	8001f6c <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ec:	f000 f900 	bl	80003f0 <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	; 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <MX_CAN_Init+0x64>)
 80001fe:	4a18      	ldr	r2, [pc, #96]	; (8000260 <MX_CAN_Init+0x68>)
 8000200:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN_Init+0x64>)
 8000204:	2202      	movs	r2, #2
 8000206:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <MX_CAN_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_CAN_Init+0x64>)
 8000216:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800021a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN_Init+0x64>)
 800021e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000222:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN_Init+0x64>)
 800022c:	2201      	movs	r2, #1
 800022e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN_Init+0x64>)
 8000238:	2201      	movs	r2, #1
 800023a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN_Init+0x64>)
 800024a:	f000 fcf1 	bl	8000c30 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000254:	f000 f8cc 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40006400 	.word	0x40006400

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f001 fffe 	bl	800229c <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f8a3 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000050 	.word	0x20000050
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b43      	ldr	r3, [pc, #268]	; (80003dc <MX_GPIO_Init+0x124>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a42      	ldr	r2, [pc, #264]	; (80003dc <MX_GPIO_Init+0x124>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b40      	ldr	r3, [pc, #256]	; (80003dc <MX_GPIO_Init+0x124>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <MX_GPIO_Init+0x124>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <MX_GPIO_Init+0x124>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <MX_GPIO_Init+0x124>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b37      	ldr	r3, [pc, #220]	; (80003dc <MX_GPIO_Init+0x124>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <MX_GPIO_Init+0x124>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b34      	ldr	r3, [pc, #208]	; (80003dc <MX_GPIO_Init+0x124>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <MX_GPIO_Init+0x124>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <MX_GPIO_Init+0x124>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <MX_GPIO_Init+0x124>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	482b      	ldr	r0, [pc, #172]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000334:	f001 fb68 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_YELLOW_Pin|Valve6_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800033e:	4829      	ldr	r0, [pc, #164]	; (80003e4 <MX_GPIO_Init+0x12c>)
 8000340:	f001 fb62 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|Valve0_Pin|Valve1_Pin|Valve2_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f64f 4101 	movw	r1, #64513	; 0xfc01
 800034a:	4827      	ldr	r0, [pc, #156]	; (80003e8 <MX_GPIO_Init+0x130>)
 800034c:	f001 fb5c 	bl	8001a08 <HAL_GPIO_WritePin>
                          |Valve3_Pin|Valve4_Pin|Valve5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_GPIO_Init+0x134>)
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	481e      	ldr	r0, [pc, #120]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000366:	f001 f9cb 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin;
 800036a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	4817      	ldr	r0, [pc, #92]	; (80003e0 <MX_GPIO_Init+0x128>)
 8000384:	f001 f9bc 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin Valve6_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|Valve6_Pin;
 8000388:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80003a2:	f001 f9ad 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin Valve0_Pin Valve1_Pin Valve2_Pin
                           Valve3_Pin Valve4_Pin Valve5_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|Valve0_Pin|Valve1_Pin|Valve2_Pin
 80003a6:	f64f 4301 	movw	r3, #64513	; 0xfc01
 80003aa:	613b      	str	r3, [r7, #16]
                          |Valve3_Pin|Valve4_Pin|Valve5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480a      	ldr	r0, [pc, #40]	; (80003e8 <MX_GPIO_Init+0x130>)
 80003c0:	f001 f99e 	bl	8001700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f001 f962 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f001 f97b 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40011000 	.word	0x40011000
 80003e4:	40010800 	.word	0x40010800
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	10210000 	.word	0x10210000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <HAL_CAN_MspInit+0xd0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d153      	bne.n	8000528 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000480:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a2b      	ldr	r2, [pc, #172]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b29      	ldr	r3, [pc, #164]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000498:	4b26      	ldr	r3, [pc, #152]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a25      	ldr	r2, [pc, #148]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b23      	ldr	r3, [pc, #140]	; (8000534 <HAL_CAN_MspInit+0xd4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	481c      	ldr	r0, [pc, #112]	; (8000538 <HAL_CAN_MspInit+0xd8>)
 80004c6:	f001 f91b 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	4816      	ldr	r0, [pc, #88]	; (8000538 <HAL_CAN_MspInit+0xd8>)
 80004e0:	f001 f90e 	bl	8001700 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_CAN_MspInit+0xdc>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
 80004f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
 80004fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_CAN_MspInit+0xdc>)
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2101      	movs	r1, #1
 800050c:	2014      	movs	r0, #20
 800050e:	f001 f8c0 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000512:	2014      	movs	r0, #20
 8000514:	f001 f8d9 	bl	80016ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	2015      	movs	r0, #21
 800051e:	f001 f8b8 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000522:	2015      	movs	r0, #21
 8000524:	f001 f8d1 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000528:	bf00      	nop
 800052a:	3728      	adds	r7, #40	; 0x28
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40006400 	.word	0x40006400
 8000534:	40021000 	.word	0x40021000
 8000538:	40010c00 	.word	0x40010c00
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <HAL_UART_MspInit+0xa4>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d13d      	bne.n	80005dc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_UART_MspInit+0xa8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	2303      	movs	r3, #3
 800059a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <HAL_UART_MspInit+0xac>)
 80005a4:	f001 f8ac 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <HAL_UART_MspInit+0xac>)
 80005bc:	f001 f8a0 	bl	8001700 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_UART_MspInit+0xb0>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_UART_MspInit+0xb0>)
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013800 	.word	0x40013800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40010000 	.word	0x40010000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 fab9 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800064a:	f000 fd1e 	bl	800108a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028

08000658 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <CAN1_RX1_IRQHandler+0x10>)
 800065e:	f000 fd14 	bl	800108a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028

0800066c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8000670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000674:	f001 f9e0 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <_ZN7CanCtrl4initEv>:
public:
    void init();
	HAL_StatusTypeDef Canrx(uint32_t RID,uint8_t data[8]);//受信関数(エラー判定のみ)内容は引数に入れ込む。
};

void CanCtrl::init(){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	filter.FilterIdHigh         = 0x100 << 5;                 // フィルターIDの上位16ビット
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000696:	621a      	str	r2, [r3, #32]
	filter.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterMaskIdHigh     = 0x7f8 << 5;               // フィルターマスクの上位16ビット
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2206      	movs	r2, #6
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	63da      	str	r2, [r3, #60]	; 0x3c
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
	filter.FilterBank           = 0;                        // フィルターバンクNo
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	220e      	movs	r2, #14
 80006c8:	645a      	str	r2, [r3, #68]	; 0x44
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3320      	adds	r3, #32
 80006d4:	4619      	mov	r1, r3
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <_ZN7CanCtrl4initEv+0x5c>)
 80006d8:	f000 fba5 	bl	8000e26 <HAL_CAN_ConfigFilter>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028

080006e8 <_ZN8solenoid8safty_OKEv>:
	else{
		return HAL_ERROR;
	}
}

inline void solenoid::safty_OK(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if(mode == HAL_ERROR){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7b1b      	ldrb	r3, [r3, #12]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d107      	bne.n	8000708 <_ZN8solenoid8safty_OKEv+0x20>
//		if(Pin == 1){
		HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6898      	ldr	r0, [r3, #8]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	889b      	ldrh	r3, [r3, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 f980 	bl	8001a08 <HAL_GPIO_WritePin>
//		}
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN8solenoid11safty_ERROREv>:

inline void solenoid::safty_ERROR(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
//		if(Pin == 0){}
//		else{
		    HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6898      	ldr	r0, [r3, #8]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	f001 f970 	bl	8001a08 <HAL_GPIO_WritePin>
//		}
//		if(mode == HAL_ERROR){}
//		else{
//		    mode = HAL_ERROR;
//		}
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN8solenoid3EMSEv>:

inline void solenoid::EMS(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO,Valve_Pin,GPIO_PIN_RESET);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f001 f960 	bl	8001a08 <HAL_GPIO_WritePin>
	if(mode == HAL_OK){
//	   mode = HAL_ERROR;
	}
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN9SolenCtrl4initEv>:
	HAL_StatusTypeDef EMS_down();
	void check_Safty_OK();
	void check_Safty_ERROR();
};

inline void SolenCtrl::init(){
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0;i<0x7;i++){
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b06      	cmp	r3, #6
 8000760:	d80c      	bhi.n	800077c <_ZN9SolenCtrl4initEv+0x2c>
		Valve[i].BID = (0x101+i);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f203 1201 	addw	r2, r3, #257	; 0x101
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3304      	adds	r3, #4
 8000772:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0;i<0x7;i++){
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e7ef      	b.n	800075c <_ZN9SolenCtrl4initEv+0xc>
	}
	Valve[0].Valve_Pin = Valve0_Pin;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000782:	811a      	strh	r2, [r3, #8]
	Valve[1].Valve_Pin = Valve1_Pin;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800078a:	831a      	strh	r2, [r3, #24]
	Valve[2].Valve_Pin = Valve2_Pin;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000792:	851a      	strh	r2, [r3, #40]	; 0x28
	Valve[3].Valve_Pin = Valve3_Pin;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800079a:	871a      	strh	r2, [r3, #56]	; 0x38
	Valve[4].Valve_Pin = Valve4_Pin;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	Valve[5].Valve_Pin = Valve5_Pin;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	Valve[6].Valve_Pin = Valve6_Pin;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	Valve[6].GPIO = GPIOC;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <_ZN9SolenCtrl4initEv+0x7c>)
 80007be:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40011000 	.word	0x40011000

080007d0 <_ZN9SolenCtrl11get_pre_EMSEv>:
		}
	}
	return HAL_ERROR;
}

inline HAL_StatusTypeDef SolenCtrl::get_pre_EMS(){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	return pre_EMS;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_ZN9SolenCtrl11set_pre_EMSE17HAL_StatusTypeDef>:

inline HAL_StatusTypeDef SolenCtrl::set_pre_EMS(HAL_StatusTypeDef ad){
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	70fb      	strb	r3, [r7, #3]
	pre_EMS = ad;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <_ZN9SolenCtrl8EMS_downEv>:

inline HAL_StatusTypeDef SolenCtrl::EMS_down(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<7;i++){
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b06      	cmp	r3, #6
 8000814:	dc0b      	bgt.n	800082e <_ZN9SolenCtrl8EMS_downEv+0x2a>
		Valve[i].EMS();
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	3304      	adds	r3, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff85 	bl	8000730 <_ZN8solenoid3EMSEv>
	for(int i=0;i<7;i++){
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e7f0      	b.n	8000810 <_ZN9SolenCtrl8EMS_downEv+0xc>
	}
	pre_EMS = HAL_ERROR;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <_ZN9SolenCtrl8EMS_downEv+0x44>)
 800083a:	f001 f8e5 	bl	8001a08 <HAL_GPIO_WritePin>
	return HAL_OK;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40010c00 	.word	0x40010c00

0800084c <_ZN9SolenCtrl14check_Safty_OKEv>:

inline void SolenCtrl::check_Safty_OK(){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	for (int i=0;i<7;i++){
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b06      	cmp	r3, #6
 800085c:	dc10      	bgt.n	8000880 <_ZN9SolenCtrl14check_Safty_OKEv+0x34>
		Valve[i].safty_OK();
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	3304      	adds	r3, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff3d 	bl	80006e8 <_ZN8solenoid8safty_OKEv>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <_ZN9SolenCtrl14check_Safty_OKEv+0x3c>)
 8000874:	f001 f8c8 	bl	8001a08 <HAL_GPIO_WritePin>
	for (int i=0;i<7;i++){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e7eb      	b.n	8000858 <_ZN9SolenCtrl14check_Safty_OKEv+0xc>
	}
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40010c00 	.word	0x40010c00

0800088c <_ZN9SolenCtrl17check_Safty_ERROREv>:

inline void SolenCtrl::check_Safty_ERROR(){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	for (int i=0;i<7;i++){
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b06      	cmp	r3, #6
 800089c:	dc0b      	bgt.n	80008b6 <_ZN9SolenCtrl17check_Safty_ERROREv+0x2a>
		Valve[i].safty_ERROR();
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	3304      	adds	r3, #4
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <_ZN8solenoid11safty_ERROREv>
	for (int i=0;i<7;i++){
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e7f0      	b.n	8000898 <_ZN9SolenCtrl17check_Safty_ERROREv+0xc>
	}
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <_ZN8solenoidC1Ev>:
struct solenoid{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <_ZN8solenoidC1Ev+0x20>)
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	731a      	strb	r2, [r3, #12]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40010c00 	.word	0x40010c00

080008e4 <_ZN9SolenCtrlC1Ev>:
class SolenCtrl{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2406      	movs	r4, #6
 80008f8:	461d      	mov	r5, r3
 80008fa:	2c00      	cmp	r4, #0
 80008fc:	db05      	blt.n	800090a <_ZN9SolenCtrlC1Ev+0x26>
 80008fe:	4628      	mov	r0, r5
 8000900:	f7ff ffde 	bl	80008c0 <_ZN8solenoidC1Ev>
 8000904:	3510      	adds	r5, #16
 8000906:	3c01      	subs	r4, #1
 8000908:	e7f7      	b.n	80008fa <_ZN9SolenCtrlC1Ev+0x16>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bdb0      	pop	{r4, r5, r7, pc}

08000914 <HAL_GPIO_EXTI_Callback>:
			}
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
	if(Solen.EMS_down()==HAL_OK){
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <HAL_GPIO_EXTI_Callback+0x40>)
 8000920:	f7ff ff70 	bl	8000804 <_ZN9SolenCtrl8EMS_downEv>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf0c      	ite	eq
 800092a:	2301      	moveq	r3, #1
 800092c:	2300      	movne	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_GPIO_EXTI_Callback+0x44>)
 800093a:	f001 f865 	bl	8001a08 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
	}
	else{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);;
	}
}
 800093e:	e004      	b.n	800094a <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);;
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <HAL_GPIO_EXTI_Callback+0x44>)
 8000946:	f001 f85f 	bl	8001a08 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000dc 	.word	0x200000dc
 8000958:	40010c00 	.word	0x40010c00

0800095c <main_cpp>:

void main_cpp(){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	Can.init();
 8000962:	4848      	ldr	r0, [pc, #288]	; (8000a84 <main_cpp+0x128>)
 8000964:	f7ff fe90 	bl	8000688 <_ZN7CanCtrl4initEv>
	Solen.init();
 8000968:	4847      	ldr	r0, [pc, #284]	; (8000a88 <main_cpp+0x12c>)
 800096a:	f7ff fef1 	bl	8000750 <_ZN9SolenCtrl4initEv>
	for(uint8_t i=0;i<3;i++){
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d82a      	bhi.n	80009ce <main_cpp+0x72>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4843      	ldr	r0, [pc, #268]	; (8000a8c <main_cpp+0x130>)
 800097e:	f001 f843 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	4842      	ldr	r0, [pc, #264]	; (8000a90 <main_cpp+0x134>)
 8000988:	f001 f83e 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800098c:	2064      	movs	r0, #100	; 0x64
 800098e:	f000 f92b 	bl	8000be8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	483d      	ldr	r0, [pc, #244]	; (8000a8c <main_cpp+0x130>)
 8000998:	f001 f836 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	483b      	ldr	r0, [pc, #236]	; (8000a90 <main_cpp+0x134>)
 80009a2:	f001 f831 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 f91e 	bl	8000be8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	4837      	ldr	r0, [pc, #220]	; (8000a90 <main_cpp+0x134>)
 80009b2:	f001 f829 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4835      	ldr	r0, [pc, #212]	; (8000a90 <main_cpp+0x134>)
 80009bc:	f001 f824 	bl	8001a08 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009c0:	2064      	movs	r0, #100	; 0x64
 80009c2:	f000 f911 	bl	8000be8 <HAL_Delay>
	for(uint8_t i=0;i<3;i++){
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3301      	adds	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e7d1      	b.n	8000972 <main_cpp+0x16>
	}
	HAL_CAN_Start(&hcan);
 80009ce:	4831      	ldr	r0, [pc, #196]	; (8000a94 <main_cpp+0x138>)
 80009d0:	f000 faf2 	bl	8000fb8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009d4:	2102      	movs	r1, #2
 80009d6:	482f      	ldr	r0, [pc, #188]	; (8000a94 <main_cpp+0x138>)
 80009d8:	f000 fb32 	bl	8001040 <HAL_CAN_ActivateNotification>

	while(true){//safty_roop
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	482b      	ldr	r0, [pc, #172]	; (8000a90 <main_cpp+0x134>)
 80009e2:	f001 f811 	bl	8001a08 <HAL_GPIO_WritePin>
    	if(Solen.get_pre_EMS() == HAL_OK){
 80009e6:	4828      	ldr	r0, [pc, #160]	; (8000a88 <main_cpp+0x12c>)
 80009e8:	f7ff fef2 	bl	80007d0 <_ZN9SolenCtrl11get_pre_EMSEv>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf0c      	ite	eq
 80009f2:	2301      	moveq	r3, #1
 80009f4:	2300      	movne	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d011      	beq.n	8000a20 <main_cpp+0xc4>
/*    		if((GPIOC->IDR & !(GPIO_IDR_IDR13))){//予備の緊急停止
    		  	Solen.EMS_down();
    		}*/
    		if((GPIOC->IDR & GPIO_IDR_IDR13)){//modeの状態違反の確認
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <main_cpp+0x13c>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <main_cpp+0xbe>
    			Solen.check_Safty_OK();
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <main_cpp+0x12c>)
 8000a14:	f7ff ff1a 	bl	800084c <_ZN9SolenCtrl14check_Safty_OKEv>
 8000a18:	e002      	b.n	8000a20 <main_cpp+0xc4>
    		}
    		else{//予備の緊急停止
    			Solen.EMS_down();//コールバックだけだと一定の確率でバグる。意味不明。
 8000a1a:	481b      	ldr	r0, [pc, #108]	; (8000a88 <main_cpp+0x12c>)
 8000a1c:	f7ff fef2 	bl	8000804 <_ZN9SolenCtrl8EMS_downEv>
    		}

    	}
    	if(Solen.get_pre_EMS() == HAL_ERROR){
 8000a20:	4819      	ldr	r0, [pc, #100]	; (8000a88 <main_cpp+0x12c>)
 8000a22:	f7ff fed5 	bl	80007d0 <_ZN9SolenCtrl11get_pre_EMSEv>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	bf0c      	ite	eq
 8000a2c:	2301      	moveq	r3, #1
 8000a2e:	2300      	movne	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d01f      	beq.n	8000a76 <main_cpp+0x11a>
/*    		if((GPIOC->IDR & !(GPIO_IDR_IDR13))){//EMS継続
    			Solen.check_Safty_ERROR();
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
    			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
    		}*/
    		if((GPIOC->IDR & GPIO_IDR_IDR13)){//EMS解除時
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <main_cpp+0x13c>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00c      	beq.n	8000a66 <main_cpp+0x10a>
    			Solen.check_Safty_ERROR();
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <main_cpp+0x12c>)
 8000a4e:	f7ff ff1d 	bl	800088c <_ZN9SolenCtrl17check_Safty_ERROREv>
    			Solen.set_pre_EMS(HAL_OK);
 8000a52:	2100      	movs	r1, #0
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <main_cpp+0x12c>)
 8000a56:	f7ff fec6 	bl	80007e6 <_ZN9SolenCtrl11set_pre_EMSE17HAL_StatusTypeDef>
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <main_cpp+0x130>)
 8000a60:	f000 ffd2 	bl	8001a08 <HAL_GPIO_WritePin>
 8000a64:	e007      	b.n	8000a76 <main_cpp+0x11a>
    		}
    		else{//EMS継続
    			Solen.check_Safty_ERROR();
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <main_cpp+0x12c>)
 8000a68:	f7ff ff10 	bl	800088c <_ZN9SolenCtrl17check_Safty_ERROREv>
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <main_cpp+0x130>)
 8000a72:	f000 ffc9 	bl	8001a08 <HAL_GPIO_WritePin>
    		}
    	}
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <main_cpp+0x134>)
 8000a7c:	f000 ffc4 	bl	8001a08 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000a80:	e7ac      	b.n	80009dc <main_cpp+0x80>
 8000a82:	bf00      	nop
 8000a84:	20000094 	.word	0x20000094
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	40010800 	.word	0x40010800
 8000a94:	20000028 	.word	0x20000028
 8000a98:	40011000 	.word	0x40011000

08000a9c <_Z41__static_initialization_and_destruction_0ii>:
    }
}
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d107      	bne.n	8000abc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d102      	bne.n	8000abc <_Z41__static_initialization_and_destruction_0ii+0x20>
SolenCtrl Solen;
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ab8:	f7ff ff14 	bl	80008e4 <_ZN9SolenCtrlC1Ev>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000dc 	.word	0x200000dc

08000ac8 <_GLOBAL__sub_I__ZN7CanCtrl4initEv>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ffe3 	bl	8000a9c <_Z41__static_initialization_and_destruction_0ii>
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afe:	f7ff fdbd 	bl	800067c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f001 fca7 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff fb21 	bl	800014c <main>
  bx lr
 8000b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	080024f8 	.word	0x080024f8
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	20000154 	.word	0x20000154

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 fda1 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fc5c 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fdb9 	bl	80016e6 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 fd81 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000150 	.word	0x20000150

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000150 	.word	0x20000150

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff0 	bl	8000bd4 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffe0 	bl	8000bd4 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0ed      	b.n	8000e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fc06 	bl	8000460 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0201 	orr.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c64:	f7ff ffb6 	bl	8000bd4 <HAL_GetTick>
 8000c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c6a:	e012      	b.n	8000c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c6c:	f7ff ffb2 	bl	8000bd4 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d90b      	bls.n	8000c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2205      	movs	r2, #5
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e0c5      	b.n	8000e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0e5      	beq.n	8000c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0202 	bic.w	r2, r2, #2
 8000cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb0:	f7ff ff90 	bl	8000bd4 <HAL_GetTick>
 8000cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cb6:	e012      	b.n	8000cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb8:	f7ff ff8c 	bl	8000bd4 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b0a      	cmp	r3, #10
 8000cc4:	d90b      	bls.n	8000cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e09f      	b.n	8000e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1e5      	bne.n	8000cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7e1b      	ldrb	r3, [r3, #24]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e007      	b.n	8000d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7e5b      	ldrb	r3, [r3, #25]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d108      	bne.n	8000d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7e9b      	ldrb	r3, [r3, #26]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d108      	bne.n	8000d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0220 	orr.w	r2, r2, #32
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0220 	bic.w	r2, r2, #32
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7edb      	ldrb	r3, [r3, #27]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d108      	bne.n	8000d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0210 	bic.w	r2, r2, #16
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0210 	orr.w	r2, r2, #16
 8000d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7f1b      	ldrb	r3, [r3, #28]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d108      	bne.n	8000dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0208 	orr.w	r2, r2, #8
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	e007      	b.n	8000dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0208 	bic.w	r2, r2, #8
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f5b      	ldrb	r3, [r3, #29]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d108      	bne.n	8000dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0204 	orr.w	r2, r2, #4
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0204 	bic.w	r2, r2, #4
 8000de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	ea42 0103 	orr.w	r1, r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b087      	sub	sp, #28
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e3e:	7cfb      	ldrb	r3, [r7, #19]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d003      	beq.n	8000e4c <HAL_CAN_ConfigFilter+0x26>
 8000e44:	7cfb      	ldrb	r3, [r7, #19]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	f040 80aa 	bne.w	8000fa0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	2201      	movs	r2, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d123      	bne.n	8000ece <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	401a      	ands	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3248      	adds	r2, #72	; 0x48
 8000eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ec4:	6979      	ldr	r1, [r7, #20]
 8000ec6:	3348      	adds	r3, #72	; 0x48
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d122      	bne.n	8000f1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ef6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3248      	adds	r2, #72	; 0x48
 8000efc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f12:	6979      	ldr	r1, [r7, #20]
 8000f14:	3348      	adds	r3, #72	; 0x48
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f36:	e007      	b.n	8000f48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d107      	bne.n	8000f8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f92:	f023 0201 	bic.w	r2, r3, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e006      	b.n	8000fae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
  }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d12e      	bne.n	800102a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fe4:	f7ff fdf6 	bl	8000bd4 <HAL_GetTick>
 8000fe8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fea:	e012      	b.n	8001012 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fec:	f7ff fdf2 	bl	8000bd4 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	d90b      	bls.n	8001012 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2205      	movs	r2, #5
 800100a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e012      	b.n	8001038 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e5      	bne.n	8000fec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e006      	b.n	8001038 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
  }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d002      	beq.n	800105e <HAL_CAN_ActivateNotification+0x1e>
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d109      	bne.n	8001072 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6959      	ldr	r1, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e006      	b.n	8001080 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b08a      	sub	sp, #40	; 0x28
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d07c      	beq.n	80011ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d023      	beq.n	8001122 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f983 	bl	80013f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80010f2:	e016      	b.n	8001122 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
 8001106:	e00c      	b.n	8001122 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	e002      	b.n	8001122 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f986 	bl	800142e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d024      	beq.n	8001176 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f962 	bl	800140a <HAL_CAN_TxMailbox1CompleteCallback>
 8001146:	e016      	b.n	8001176 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	e00c      	b.n	8001176 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
 800116e:	e002      	b.n	8001176 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f965 	bl	8001440 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d024      	beq.n	80011ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001188:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f941 	bl	800141c <HAL_CAN_TxMailbox2CompleteCallback>
 800119a:	e016      	b.n	80011ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
 80011ae:	e00c      	b.n	80011ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
 80011c2:	e002      	b.n	80011ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f944 	bl	8001452 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2210      	movs	r2, #16
 80011ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00b      	beq.n	8001210 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2208      	movs	r2, #8
 8001208:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f933 	bl	8001476 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f91b 	bl	8001464 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001248:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2210      	movs	r2, #16
 8001250:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2208      	movs	r2, #8
 800126c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f913 	bl	800149a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f8fb 	bl	8001488 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2210      	movs	r2, #16
 80012ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f8fc 	bl	80014ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2208      	movs	r2, #8
 80012ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f8f4 	bl	80014be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d07b      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d072      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001344:	2b00      	cmp	r3, #0
 8001346:	d043      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d03e      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001358:	2b60      	cmp	r3, #96	; 0x60
 800135a:	d02b      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x32a>
 800135c:	2b60      	cmp	r3, #96	; 0x60
 800135e:	d82e      	bhi.n	80013be <HAL_CAN_IRQHandler+0x334>
 8001360:	2b50      	cmp	r3, #80	; 0x50
 8001362:	d022      	beq.n	80013aa <HAL_CAN_IRQHandler+0x320>
 8001364:	2b50      	cmp	r3, #80	; 0x50
 8001366:	d82a      	bhi.n	80013be <HAL_CAN_IRQHandler+0x334>
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d019      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x316>
 800136c:	2b40      	cmp	r3, #64	; 0x40
 800136e:	d826      	bhi.n	80013be <HAL_CAN_IRQHandler+0x334>
 8001370:	2b30      	cmp	r3, #48	; 0x30
 8001372:	d010      	beq.n	8001396 <HAL_CAN_IRQHandler+0x30c>
 8001374:	2b30      	cmp	r3, #48	; 0x30
 8001376:	d822      	bhi.n	80013be <HAL_CAN_IRQHandler+0x334>
 8001378:	2b10      	cmp	r3, #16
 800137a:	d002      	beq.n	8001382 <HAL_CAN_IRQHandler+0x2f8>
 800137c:	2b20      	cmp	r3, #32
 800137e:	d005      	beq.n	800138c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001380:	e01d      	b.n	80013be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800138a:	e019      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001394:	e014      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800139e:	e00f      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013a8:	e00a      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b2:	e005      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013bc:	e000      	b.n	80013c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80013be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2204      	movs	r2, #4
 80013d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f870 	bl	80014d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
	...

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff42 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b08b      	sub	sp, #44	; 0x2c
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e169      	b.n	80019e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001714:	2201      	movs	r2, #1
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	429a      	cmp	r2, r3
 800172e:	f040 8158 	bne.w	80019e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a9a      	ldr	r2, [pc, #616]	; (80019a0 <HAL_GPIO_Init+0x2a0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d05e      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800173c:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <HAL_GPIO_Init+0x2a0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d875      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001742:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <HAL_GPIO_Init+0x2a4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d058      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001748:	4a96      	ldr	r2, [pc, #600]	; (80019a4 <HAL_GPIO_Init+0x2a4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d86f      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800174e:	4a96      	ldr	r2, [pc, #600]	; (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d052      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001754:	4a94      	ldr	r2, [pc, #592]	; (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d869      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800175a:	4a94      	ldr	r2, [pc, #592]	; (80019ac <HAL_GPIO_Init+0x2ac>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04c      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001760:	4a92      	ldr	r2, [pc, #584]	; (80019ac <HAL_GPIO_Init+0x2ac>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d863      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001766:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <HAL_GPIO_Init+0x2b0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d046      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800176c:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <HAL_GPIO_Init+0x2b0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d85d      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d82a      	bhi.n	80017cc <HAL_GPIO_Init+0xcc>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d859      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_GPIO_Init+0x80>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017d5 	.word	0x080017d5
 8001788:	080017e7 	.word	0x080017e7
 800178c:	08001829 	.word	0x08001829
 8001790:	0800182f 	.word	0x0800182f
 8001794:	0800182f 	.word	0x0800182f
 8001798:	0800182f 	.word	0x0800182f
 800179c:	0800182f 	.word	0x0800182f
 80017a0:	0800182f 	.word	0x0800182f
 80017a4:	0800182f 	.word	0x0800182f
 80017a8:	0800182f 	.word	0x0800182f
 80017ac:	0800182f 	.word	0x0800182f
 80017b0:	0800182f 	.word	0x0800182f
 80017b4:	0800182f 	.word	0x0800182f
 80017b8:	0800182f 	.word	0x0800182f
 80017bc:	0800182f 	.word	0x0800182f
 80017c0:	0800182f 	.word	0x0800182f
 80017c4:	080017dd 	.word	0x080017dd
 80017c8:	080017f1 	.word	0x080017f1
 80017cc:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <HAL_GPIO_Init+0x2b4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d2:	e02c      	b.n	800182e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e029      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	3304      	adds	r3, #4
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e024      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	3308      	adds	r3, #8
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e01f      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	330c      	adds	r3, #12
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e01a      	b.n	8001830 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001802:	2304      	movs	r3, #4
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e013      	b.n	8001830 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	611a      	str	r2, [r3, #16]
          break;
 800181a:	e009      	b.n	8001830 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	615a      	str	r2, [r3, #20]
          break;
 8001826:	e003      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x130>
          break;
 800182e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d801      	bhi.n	800183a <HAL_GPIO_Init+0x13a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	e001      	b.n	800183e <HAL_GPIO_Init+0x13e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d802      	bhi.n	800184c <HAL_GPIO_Init+0x14c>
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x152>
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3b08      	subs	r3, #8
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	210f      	movs	r1, #15
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80b1 	beq.w	80019e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2bc>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_GPIO_Init+0x2c0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d013      	beq.n	80018ec <HAL_GPIO_Init+0x1ec>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1e8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1e0>
 80018dc:	2303      	movs	r3, #3
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018ec:	2300      	movs	r3, #0
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fe:	492f      	ldr	r1, [pc, #188]	; (80019bc <HAL_GPIO_Init+0x2bc>)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	492c      	ldr	r1, [pc, #176]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4928      	ldr	r1, [pc, #160]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4922      	ldr	r1, [pc, #136]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	491e      	ldr	r1, [pc, #120]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4914      	ldr	r1, [pc, #80]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d021      	beq.n	80019d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e021      	b.n	80019e2 <HAL_GPIO_Init+0x2e2>
 800199e:	bf00      	nop
 80019a0:	10320000 	.word	0x10320000
 80019a4:	10310000 	.word	0x10310000
 80019a8:	10220000 	.word	0x10220000
 80019ac:	10210000 	.word	0x10210000
 80019b0:	10120000 	.word	0x10120000
 80019b4:	10110000 	.word	0x10110000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40011400 	.word	0x40011400
 80019d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	43db      	mvns	r3, r3
 80019dc:	4909      	ldr	r1, [pc, #36]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019de:	4013      	ands	r3, r2
 80019e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	3301      	adds	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f ae8e 	bne.w	8001714 <HAL_GPIO_Init+0x14>
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	372c      	adds	r7, #44	; 0x2c
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe ff5c 	bl	8000914 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e272      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x12c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e24c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x76>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbc>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f846 	bl	8000bd4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f842 	bl	8000bd4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e200      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe4>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f832 	bl	8000bd4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f82e 	bl	8000bd4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1ec      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x10c>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1c0      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7fe ffe7 	bl	8000bd4 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7fe ffe3 	bl	8000bd4 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1a1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe ffc6 	bl	8000bd4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7fe ffc2 	bl	8000bd4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e180      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7fe ffa6 	bl	8000bd4 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7fe ffa2 	bl	8000bd4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e160      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 fad8 	bl	8002260 <RCC_Delay>
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff8c 	bl	8000bd4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7fe ff88 	bl	8000bd4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e146      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	42420000 	.word	0x42420000
 8001cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e9      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a6 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a87      	ldr	r2, [pc, #540]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7e      	ldr	r2, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7fe ff49 	bl	8000bd4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7fe ff45 	bl	8000bd4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e103      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a69      	ldr	r2, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x356>
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7fe fef9 	bl	8000bd4 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe fef5 	bl	8000bd4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0b1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x37e>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fee3 	bl	8000bd4 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe fedf 	bl	8000bd4 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e09b      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8087 	beq.w	8001f5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d061      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d146      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe feb3 	bl	8000bd4 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe feaf 	bl	8000bd4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e06d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4921      	ldr	r1, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a19      	ldr	r1, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fe83 	bl	8000bd4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fe7f 	bl	8000bd4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
 8001ef0:	e035      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe6c 	bl	8000bd4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fe68 	bl	8000bd4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e026      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x498>
 8001f1e:	e01e      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e019      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x500>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d040      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e073      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7fe fdba 	bl	8000bd4 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7fe fdb6 	bl	8000bd4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e053      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d210      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fd18 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	080024d4 	.word	0x080024d4
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b490      	push	{r4, r7}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002150:	f240 2301 	movw	r3, #513	; 0x201
 8002154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x46>
 800217e:	e02b      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	e02b      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3328      	adds	r3, #40	; 0x28
 8002190:	443b      	add	r3, r7
 8002192:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002196:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	3328      	adds	r3, #40	; 0x28
 80021ae:	443b      	add	r3, r7
 80021b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6a3b      	ldr	r3, [r7, #32]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc90      	pop	{r4, r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	080024c4 	.word	0x080024c4
 80021f0:	40021000 	.word	0x40021000
 80021f4:	007a1200 	.word	0x007a1200
 80021f8:	003d0900 	.word	0x003d0900

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_RCC_GetHCLKFreq+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002214:	f7ff fff2 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	080024e4 	.word	0x080024e4

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff ffde 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0adb      	lsrs	r3, r3, #11
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	080024e4 	.word	0x080024e4

08002260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Delay+0x34>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <RCC_Delay+0x38>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800227c:	bf00      	nop
  }
  while (Delay --);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <RCC_Delay+0x1c>
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e03f      	b.n	800232e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe f93c 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f829 	bl	8002338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002372:	f023 030c 	bic.w	r3, r3, #12
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	430b      	orrs	r3, r1
 800237e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2c      	ldr	r2, [pc, #176]	; (800244c <UART_SetConfig+0x114>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d103      	bne.n	80023a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023a0:	f7ff ff4a 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	e002      	b.n	80023ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023a8:	f7ff ff32 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 80023ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009a      	lsls	r2, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <UART_SetConfig+0x118>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	0119      	lsls	r1, r3, #4
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <UART_SetConfig+0x118>)
 80023e6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	fb00 f303 	mul.w	r3, r0, r3
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	3332      	adds	r3, #50	; 0x32
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	4419      	add	r1, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb2 f2f3 	udiv	r2, r2, r3
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <UART_SetConfig+0x118>)
 800241e:	fba3 0302 	umull	r0, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2064      	movs	r0, #100	; 0x64
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	3332      	adds	r3, #50	; 0x32
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <UART_SetConfig+0x118>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	440a      	add	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40013800 	.word	0x40013800
 8002450:	51eb851f 	.word	0x51eb851f

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2600      	movs	r6, #0
 8002458:	4d0c      	ldr	r5, [pc, #48]	; (800248c <__libc_init_array+0x38>)
 800245a:	4c0d      	ldr	r4, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	f000 f822 	bl	80024ac <_init>
 8002468:	2600      	movs	r6, #0
 800246a:	4d0a      	ldr	r5, [pc, #40]	; (8002494 <__libc_init_array+0x40>)
 800246c:	4c0a      	ldr	r4, [pc, #40]	; (8002498 <__libc_init_array+0x44>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080024ec 	.word	0x080024ec
 8002490:	080024ec 	.word	0x080024ec
 8002494:	080024ec 	.word	0x080024ec
 8002498:	080024f4 	.word	0x080024f4

0800249c <memset>:
 800249c:	4603      	mov	r3, r0
 800249e:	4402      	add	r2, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <_init>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr

080024b8 <_fini>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr
